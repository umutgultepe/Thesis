/*
-----------------------------------------------------------------------------
Filename:    InturlamDressingRoom.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#ifndef __InturlamDressingRoom_h_
#define __InturlamDressingRoom_h_
#include "StdAfx.h"
#include "BaseApplication.h"
#include "KinectController.h"
#include "SkeletalMesh.h"
#include "ClothResizer.h"
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif
#include "ObjObject.h"
using namespace physx;


enum moveDirection
{
	forward,
	backward,
	left,
	right,
	still
};

enum rotateDirection
{
	clockwise,
	counterclockwise,
	none
};

enum guyDirection
{
	gforward,
	gbackward,
	standing
};

class InturlamDressingRoom : public BaseApplication
{
public:
    InturlamDressingRoom(void);
    virtual ~InturlamDressingRoom(void);

protected:
    virtual void createScene(void);
	virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);
	virtual bool keyPressed( const OIS::KeyEvent &arg );
    virtual bool keyReleased( const OIS::KeyEvent &arg );
	void buildAxes();
	void createCapsule(const Ogre::String& strName, const float r,const float r2,const float d, const int nRings = 16, const int nSegments = 16);
	void createVisualHuman();
	Ogre::SceneNode* createLimb(Ogre::String limbName,Ogre::String childNodeName,float startRadius, Ogre::Vector3 endPosition,float endRadius,Ogre::SceneNode* node,bool inheritOrientation,Quaternion orientation);
	ManualObject* createLine(Ogre::String name,Vector3 startPos,Vector3 endPos,Ogre::ColourValue color);
	void createSphere(const float r, const int nRings = 16, const int nSegments = 16);

	void loadPhysicsPiece(Ogre::MeshPtr meshData);
	void createSphereAndCapsule(Ogre::Bone* bone,Ogre::SceneNode* parentNode,int level=0);
	void updateJoints(Ogre::Bone* bone,int level=0);
	void updateVisualHuman();  
	void createSimulation();
	void setupHumanCollider();
	void updateCollisionSpheres();
	void updateVisualHumanOrientation();
	Ogre::Quaternion bodyRotation;
	KinectController* mKinect;
	PxSceneDesc initializePhysics();
	 void createCloth(PxSceneDesc sceneDesc);
	 void processMoves();
	 void updateCloth();
	 moveDirection clothDirection;
	rotateDirection clothRotation;
	guyDirection guyMoves;
	SkeletalMesh* femaleBody;
	SkeletalMesh* upperCloth;
	
	bool usingGPU;
	bool simulationCreated;
	ObjObject* lowerCloth;
	PxFoundation* gFoundation;
	PxProfileZoneManager* gManager;
	PxPhysics* gPhysicsSDK ;
	PxDefaultErrorCallback gDefaultErrorCallback;
	PxDefaultAllocator gDefaultAllocatorCallback;
	PxSimulationFilterShader gDefaultFilterShader;
	PxScene* gScene;
	PxCloth* cloth; 
	Ogre::SceneNode*				rootColliderNode;
	Ogre::SceneNode*				femaleNode;
	Ogre::SceneNode* 				clothNode;
	Ogre::SceneNode* 				clothHandle;
	Ogre::SceneNode*				lowerClothHandle;

	bool simulating;
	bool firstStep;
};

#endif // #ifndef __InturlamDressingRoom_h_
